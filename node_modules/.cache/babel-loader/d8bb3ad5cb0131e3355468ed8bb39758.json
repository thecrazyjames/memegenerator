{"ast":null,"code":"var _jsxFileName = \"/Users/James/Desktop/memegenerator/src/Components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // import html2canvas from \"html2canvas\";\n\nimport * as htmlToImage from 'html-to-image';\nimport download from \"downloadjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  } // function copyImage() { html2canvas(document.querySelector(\".meme\"), {allowTaint: true}).then(function(canvas) {\n  //     // document.body.appendChild(canvas);\n  //     const dataURI = canvas.toDataURL();\n  //     console.log(dataURI);\n  // })\n  // };\n\n\n  function copyImage() {\n    htmlToImage.toPng(document.querySelector(\".meme\")).then(function (dataUrl) {\n      download(dataUrl, 'newMeme.png');\n    });\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({ ...prevMeme,\n      [name]: value\n    }));\n  }\n\n  function loadFile(param) {\n    const imageurl = URL.createObjectURL(param.target.files[0]);\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: imageurl\n    }));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\",\n        alt: \"meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button--export\",\n        onClick: copyImage,\n        children: \"Export Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          name: \"image\",\n          id: \"file\",\n          onchange: \"loadFile(param)\",\n          style: \"display: none;\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"file\",\n          style: \"cursor: pointer;\",\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"r5oA6kerv760pdQ4Sd/Xw4jXFD4=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/Users/James/Desktop/memegenerator/src/Components/Meme.js"],"names":["React","htmlToImage","download","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","useEffect","fetch","then","res","json","data","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","copyImage","toPng","document","querySelector","dataUrl","handleChange","event","name","value","target","loadFile","param","imageurl","URL","createObjectURL","files"],"mappings":"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","sourcesContent":["import React from \"react\"\n// import html2canvas from \"html2canvas\";\nimport * as htmlToImage from 'html-to-image';\nimport download from \"downloadjs\";\n\nexport default function Meme() {\n    \n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \n    })\n    const [allMemes, setAllMemes] = React.useState([])\n    \n    React.useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(res => res.json())\n            .then(data => setAllMemes(data.data.memes))\n    }, [])\n    \n    function getMemeImage() {\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\n        const url = allMemes[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n        \n    }\n\n    // function copyImage() { html2canvas(document.querySelector(\".meme\"), {allowTaint: true}).then(function(canvas) {\n    //     // document.body.appendChild(canvas);\n    //     const dataURI = canvas.toDataURL();\n\n    //     console.log(dataURI);\n    // })\n    // };\n\n    function copyImage() {\n        htmlToImage.toPng(document.querySelector(\".meme\"))\n  .then(function (dataUrl) {\n    download(dataUrl, 'newMeme.png');\n  });\n    }\n    \n    function handleChange(event) {\n        const {name, value} = event.target\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            [name]: value\n        }))\n    }\n\n    function loadFile(param) {\n        const imageurl = URL.createObjectURL(param.target.files[0])\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: imageurl\n        }))\n    };\n    \n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    className=\"form--input\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input \n                    type=\"text\"\n                    placeholder=\"Bottom text\"\n                    className=\"form--input\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                />\n                <button \n                    className=\"form--button\"\n                    onClick={getMemeImage}\n                >\n                    Get a new meme image 🖼\n                </button>\n                \n            </div>\n\n            \n            <div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme--image\" alt=\"meme image\"/>\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n            <div className=\"form\">\n                <button \n                    className=\"form--button--export\"\n                    onClick={copyImage}\n                >\n                    Export Meme\n                </button>\n\n                <p><input type=\"file\"  accept=\"image/*\" name=\"image\" id=\"file\"  onchange=\"loadFile(param)\" style=\"display: none;\"/></p>\n                <p><label for=\"file\" style=\"cursor: pointer;\">Upload Image</label></p>\n            </div>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}