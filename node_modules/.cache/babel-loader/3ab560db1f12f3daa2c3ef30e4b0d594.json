{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { getMimeType, isDataUrl, makeDataUrl, resolveUrl } from './util';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"'])([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nexport function toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n  const result = [];\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(url => !isDataUrl(url));\n}\nexport function embed(cssText, resourceURL, baseURL, options, get) {\n  const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(url => get ? get(url) : getBlobFromURL(url, options)).then(data => {\n    if (typeof data === 'string') {\n      return makeDataUrl(data, getMimeType(resourceURL));\n    }\n\n    return makeDataUrl(data.blob, getMimeType(resourceURL) || data.contentType);\n  }).then(dataURL => cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`)).then(content => content, () => resolvedURL);\n}\n\nfunction filterPreferredFontFormat(str, _ref) {\n  let {\n    preferredFontFormat\n  } = _ref;\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, match => {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const [src,, format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n\n      if (!format) {\n        return '';\n      }\n\n      if (format === preferredFontFormat) {\n        return `src: ${src};`;\n      }\n    }\n  });\n}\n\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport function embedResources(cssText, baseUrl, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!shouldEmbed(cssText)) {\n      return Promise.resolve(cssText);\n    }\n\n    const filteredCSSText = filterPreferredFontFormat(cssText, options);\n    return Promise.resolve(filteredCSSText).then(parseURLs).then(urls => urls.reduce((deferred, url) => // eslint-disable-next-line promise/no-nesting\n    deferred.then(css => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText)));\n  });\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","getMimeType","isDataUrl","makeDataUrl","resolveUrl","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","parseURLs","cssText","result","raw","quotation","push","filter","embed","resourceURL","baseURL","options","get","resolvedURL","Promise","resolve","then","data","blob","contentType","dataURL","content","filterPreferredFontFormat","str","preferredFontFormat","match","src","format","exec","shouldEmbed","search","embedResources","baseUrl","filteredCSSText","urls","reduce","deferred","css"],"sources":["../src/embedResources.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}