{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { cloneNode } from './cloneNode';\nimport { embedImages } from './embedImages';\nimport { applyStyleWithOptions } from './applyStyleWithOptions';\nimport { embedWebFonts, getWebFontCSS } from './embedWebFonts';\nimport { getNodeWidth, getNodeHeight, getPixelRatio, createImage, canvasToBlob, nodeToDataURL } from './util';\n\nfunction getImageSize(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const width = options.width || getNodeWidth(node);\n  const height = options.height || getNodeHeight(node);\n  return {\n    width,\n    height\n  };\n}\n\nexport function toSvg(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    return Promise.resolve(node).then(nativeNode => cloneNode(nativeNode, options, true)).then(clonedNode => embedWebFonts(clonedNode, options)).then(clonedNode => embedImages(clonedNode, options)).then(clonedNode => applyStyleWithOptions(clonedNode, options)).then(clonedNode => nodeToDataURL(clonedNode, width, height));\n  });\n}\nconst dimensionCanvasLimit = 16384; // as per https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\n\nfunction checkCanvasDimensions(canvas) {\n  if (canvas.width > dimensionCanvasLimit || canvas.height > dimensionCanvasLimit) {\n    if (canvas.width > dimensionCanvasLimit && canvas.height > dimensionCanvasLimit) {\n      if (canvas.width > canvas.height) {\n        canvas.height *= dimensionCanvasLimit / canvas.width;\n        canvas.width = dimensionCanvasLimit;\n      } else {\n        canvas.width *= dimensionCanvasLimit / canvas.height;\n        canvas.height = dimensionCanvasLimit;\n      }\n    } else if (canvas.width > dimensionCanvasLimit) {\n      canvas.height *= dimensionCanvasLimit / canvas.width;\n      canvas.width = dimensionCanvasLimit;\n    } else {\n      canvas.width *= dimensionCanvasLimit / canvas.height;\n      canvas.height = dimensionCanvasLimit;\n    }\n  }\n}\n\nexport function toCanvas(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    return toSvg(node, options).then(createImage).then(img => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      const ratio = options.pixelRatio || getPixelRatio();\n      const {\n        width,\n        height\n      } = getImageSize(node, options);\n      const canvasWidth = options.canvasWidth || width;\n      const canvasHeight = options.canvasHeight || height;\n      canvas.width = canvasWidth * ratio;\n      canvas.height = canvasHeight * ratio;\n\n      if (!options.skipAutoScale) {\n        checkCanvasDimensions(canvas);\n      }\n\n      canvas.style.width = `${canvasWidth}`;\n      canvas.style.height = `${canvasHeight}`;\n\n      if (options.backgroundColor) {\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    });\n  });\n}\nexport function toPixelData(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    return toCanvas(node, options).then(canvas => {\n      const ctx = canvas.getContext('2d');\n      return ctx.getImageData(0, 0, width, height).data;\n    });\n  });\n}\nexport function toPng(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(node, options).then(canvas => canvas.toDataURL());\n  });\n}\nexport function toJpeg(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(node, options).then(canvas => canvas.toDataURL('image/jpeg', options.quality || 1));\n  });\n}\nexport function toBlob(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(node, options).then(canvasToBlob);\n  });\n}\nexport function getFontEmbedCSS(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    return getWebFontCSS(node, options);\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,iBAA7C;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,YALF,EAMEC,aANF,QAOO,QAPP;;AASA,SAASC,YAAT,CAAsBC,IAAtB,EAA8D;AAAA,MAArBC,OAAqB,uEAAF,EAAE;AAC5D,QAAMC,KAAK,GAAGD,OAAO,CAACC,KAAR,IAAiBT,YAAY,CAACO,IAAD,CAA3C;AACA,QAAMG,MAAM,GAAGF,OAAO,CAACE,MAAR,IAAkBT,aAAa,CAACM,IAAD,CAA9C;AAEA,SAAO;AAAEE,SAAF;AAASC;AAAT,GAAP;AACD;;AAED,OAAM,SAAgBC,KAAhB,CACJJ,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,UAAM;AAAEC,WAAF;AAASC;AAAT,QAAoBJ,YAAY,CAACC,IAAD,EAAOC,OAAP,CAAtC;AAEA,WAAOI,OAAO,CAACC,OAAR,CAAgBN,IAAhB,EACJO,IADI,CACEC,UAAD,IAAgBpB,SAAS,CAACoB,UAAD,EAAaP,OAAb,EAAsB,IAAtB,CAD1B,EAEJM,IAFI,CAEEE,UAAD,IAAgBlB,aAAa,CAACkB,UAAD,EAAcR,OAAd,CAF9B,EAGJM,IAHI,CAGEE,UAAD,IAAgBpB,WAAW,CAACoB,UAAD,EAAaR,OAAb,CAH5B,EAIJM,IAJI,CAIEE,UAAD,IAAgBnB,qBAAqB,CAACmB,UAAD,EAAaR,OAAb,CAJtC,EAKJM,IALI,CAKEE,UAAD,IAAgBX,aAAa,CAACW,UAAD,EAAaP,KAAb,EAAoBC,MAApB,CAL9B,CAAP;AAMD;AAAA;AAED,MAAMO,oBAAoB,GAAG,KAA7B,C,CAAmC;;AAEnC,SAASC,qBAAT,CAA+BC,MAA/B,EAAwD;AACtD,MACEA,MAAM,CAACV,KAAP,GAAeQ,oBAAf,IACAE,MAAM,CAACT,MAAP,GAAgBO,oBAFlB,EAGE;AACA,QACEE,MAAM,CAACV,KAAP,GAAeQ,oBAAf,IACAE,MAAM,CAACT,MAAP,GAAgBO,oBAFlB,EAGE;AACA,UAAIE,MAAM,CAACV,KAAP,GAAeU,MAAM,CAACT,MAA1B,EAAkC;AAChCS,cAAM,CAACT,MAAP,IAAiBO,oBAAoB,GAAGE,MAAM,CAACV,KAA/C;AACAU,cAAM,CAACV,KAAP,GAAeQ,oBAAf;AACD,OAHD,MAGO;AACLE,cAAM,CAACV,KAAP,IAAgBQ,oBAAoB,GAAGE,MAAM,CAACT,MAA9C;AACAS,cAAM,CAACT,MAAP,GAAgBO,oBAAhB;AACD;AACF,KAXD,MAWO,IAAIE,MAAM,CAACV,KAAP,GAAeQ,oBAAnB,EAAyC;AAC9CE,YAAM,CAACT,MAAP,IAAiBO,oBAAoB,GAAGE,MAAM,CAACV,KAA/C;AACAU,YAAM,CAACV,KAAP,GAAeQ,oBAAf;AACD,KAHM,MAGA;AACLE,YAAM,CAACV,KAAP,IAAgBQ,oBAAoB,GAAGE,MAAM,CAACT,MAA9C;AACAS,YAAM,CAACT,MAAP,GAAgBO,oBAAhB;AACD;AACF;AACF;;AACD,OAAM,SAAgBG,QAAhB,CACJb,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,WAAOG,KAAK,CAACJ,IAAD,EAAOC,OAAP,CAAL,CACJM,IADI,CACCX,WADD,EAEJW,IAFI,CAEEO,GAAD,IAAQ;AACZ,YAAMF,MAAM,GAAGG,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,YAAMC,OAAO,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAhB;AACA,YAAMC,KAAK,GAAGlB,OAAO,CAACmB,UAAR,IAAsBzB,aAAa,EAAjD;AACA,YAAM;AAAEO,aAAF;AAASC;AAAT,UAAoBJ,YAAY,CAACC,IAAD,EAAOC,OAAP,CAAtC;AAEA,YAAMoB,WAAW,GAAGpB,OAAO,CAACoB,WAAR,IAAuBnB,KAA3C;AACA,YAAMoB,YAAY,GAAGrB,OAAO,CAACqB,YAAR,IAAwBnB,MAA7C;AAEAS,YAAM,CAACV,KAAP,GAAemB,WAAW,GAAGF,KAA7B;AACAP,YAAM,CAACT,MAAP,GAAgBmB,YAAY,GAAGH,KAA/B;;AAEA,UAAI,CAAClB,OAAO,CAACsB,aAAb,EAA4B;AAC1BZ,6BAAqB,CAACC,MAAD,CAArB;AACD;;AACDA,YAAM,CAACY,KAAP,CAAatB,KAAb,GAAqB,GAAGmB,WAAW,EAAnC;AACAT,YAAM,CAACY,KAAP,CAAarB,MAAb,GAAsB,GAAGmB,YAAY,EAArC;;AAEA,UAAIrB,OAAO,CAACwB,eAAZ,EAA6B;AAC3BR,eAAO,CAACS,SAAR,GAAoBzB,OAAO,CAACwB,eAA5B;AACAR,eAAO,CAACU,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBf,MAAM,CAACV,KAA9B,EAAqCU,MAAM,CAACT,MAA5C;AACD;;AAEDc,aAAO,CAACW,SAAR,CAAkBd,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6BF,MAAM,CAACV,KAApC,EAA2CU,MAAM,CAACT,MAAlD;AAEA,aAAOS,MAAP;AACD,KA5BI,CAAP;AA6BD;AAAA;AAED,OAAM,SAAgBiB,WAAhB,CACJ7B,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,UAAM;AAAEC,WAAF;AAASC;AAAT,QAAoBJ,YAAY,CAACC,IAAD,EAAOC,OAAP,CAAtC;AACA,WAAOY,QAAQ,CAACb,IAAD,EAAOC,OAAP,CAAR,CAAwBM,IAAxB,CAA8BK,MAAD,IAAW;AAC7C,YAAMkB,GAAG,GAAGlB,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;AACA,aAAOY,GAAG,CAACC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB7B,KAAvB,EAA8BC,MAA9B,EAAsC6B,IAA7C;AACD,KAHM,CAAP;AAID;AAAA;AAED,OAAM,SAAgBC,KAAhB,CACJjC,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,WAAOY,QAAQ,CAACb,IAAD,EAAOC,OAAP,CAAR,CAAwBM,IAAxB,CAA8BK,MAAD,IAAYA,MAAM,CAACsB,SAAP,EAAzC,CAAP;AACD;AAAA;AAED,OAAM,SAAgBC,MAAhB,CACJnC,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,WAAOY,QAAQ,CAACb,IAAD,EAAOC,OAAP,CAAR,CAAwBM,IAAxB,CAA8BK,MAAD,IAClCA,MAAM,CAACsB,SAAP,CAAiB,YAAjB,EAA+BjC,OAAO,CAACmC,OAAR,IAAmB,CAAlD,CADK,CAAP;AAGD;AAAA;AAED,OAAM,SAAgBC,MAAhB,CACJrC,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,WAAOY,QAAQ,CAACb,IAAD,EAAOC,OAAP,CAAR,CAAwBM,IAAxB,CAA6BV,YAA7B,CAAP;AACD;AAAA;AAED,OAAM,SAAgByC,eAAhB,CACJtC,IADI,EAEiB;AAAA,MAArBC,OAAqB,uEAAF,EAAE;;AAErB,WAAOT,aAAa,CAACQ,IAAD,EAAOC,OAAP,CAApB;AACD;AAAA","names":["cloneNode","embedImages","applyStyleWithOptions","embedWebFonts","getWebFontCSS","getNodeWidth","getNodeHeight","getPixelRatio","createImage","canvasToBlob","nodeToDataURL","getImageSize","node","options","width","height","toSvg","Promise","resolve","then","nativeNode","clonedNode","dimensionCanvasLimit","checkCanvasDimensions","canvas","toCanvas","img","document","createElement","context","getContext","ratio","pixelRatio","canvasWidth","canvasHeight","skipAutoScale","style","backgroundColor","fillStyle","fillRect","drawImage","toPixelData","ctx","getImageData","data","toPng","toDataURL","toJpeg","quality","toBlob","getFontEmbedCSS"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}