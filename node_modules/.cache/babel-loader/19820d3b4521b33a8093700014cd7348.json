{"ast":null,"code":"import { parseDataUrlContent } from './util';\nconst cache = {};\n\nfunction getCacheKey(url) {\n  let key = url.replace(/\\?.*/, ''); // font resourse\n\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '');\n  }\n\n  return key;\n}\n\nexport function getBlobFromURL(url, options) {\n  const cacheKey = getCacheKey(url);\n\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey];\n  } // cache bypass so we dont have CORS issues with cached images\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n\n\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n  }\n\n  const failed = reason => {\n    let placeholder = '';\n\n    if (options.imagePlaceholder) {\n      const parts = options.imagePlaceholder.split(/,/);\n\n      if (parts && parts[1]) {\n        placeholder = parts[1];\n      }\n    }\n\n    let msg = `Failed to fetch resource: ${url}`;\n\n    if (reason) {\n      msg = typeof reason === 'string' ? reason : reason.message;\n    }\n\n    if (msg) {\n      console.error(msg);\n    }\n\n    return {\n      blob: placeholder,\n      contentType: ''\n    };\n  };\n\n  const deferred = window.fetch(url).then(res => // eslint-disable-next-line promise/no-nesting\n  res.blob().then(blob => ({\n    blob,\n    contentType: res.headers.get('Content-Type') || ''\n  }))).then(_ref => {\n    let {\n      blob,\n      contentType\n    } = _ref;\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onloadend = () => resolve({\n        contentType,\n        blob: reader.result\n      });\n\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }).then(_ref2 => {\n    let {\n      blob,\n      contentType\n    } = _ref2;\n    return {\n      contentType,\n      blob: parseDataUrlContent(blob)\n    };\n  }) // on failed\n  .catch(failed); // cache result\n\n  cache[cacheKey] = deferred;\n  return deferred;\n}","map":{"version":3,"mappings":"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","names":["parseDataUrlContent","cache","getCacheKey","url","key","replace","test","getBlobFromURL","options","cacheKey","cacheBust","Date","getTime","failed","reason","placeholder","imagePlaceholder","parts","split","msg","message","console","error","blob","contentType","deferred","window","fetch","then","res","headers","get","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","catch"],"sources":["../src/getBlobFromURL.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}