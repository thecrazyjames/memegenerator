{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { embedResources } from './embedResources';\nimport { getMimeType, isDataUrl, makeDataUrl, toArray } from './util';\n\nfunction embedBackground(clonedNode, options) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n\n    if (!background) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(background).then(cssString => embedResources(cssString, null, options)).then(cssString => {\n      clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n      return clonedNode;\n    });\n  });\n}\n\nfunction embedImageNode(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) && !(clonedNode instanceof SVGImageElement && !isDataUrl(clonedNode.href.baseVal))) {\n      return Promise.resolve(clonedNode);\n    }\n\n    const src = clonedNode instanceof HTMLImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    return Promise.resolve(src).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(src) || data.contentType)).then(dataURL => new Promise((resolve, reject) => {\n      clonedNode.onload = resolve;\n      clonedNode.onerror = reject;\n\n      if (clonedNode instanceof HTMLImageElement) {\n        clonedNode.srcset = '';\n        clonedNode.src = dataURL;\n      } else {\n        clonedNode.href.baseVal = dataURL;\n      }\n    })).then(() => clonedNode, () => clonedNode);\n  });\n}\n\nfunction embedChildren(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const children = toArray(clonedNode.childNodes); // eslint-disable-next-line no-use-before-define\n\n    const deferreds = children.map(child => embedImages(child, options));\n    return Promise.all(deferreds).then(() => clonedNode);\n  });\n}\n\nexport function embedImages(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof Element)) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(clonedNode).then(node => embedBackground(node, options)).then(node => embedImageNode(node, options)).then(node => embedChildren(node, options));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}