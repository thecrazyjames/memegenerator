{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { clonePseudoElements } from './clonePseudoElements';\nimport { createImage, getMimeType, makeDataUrl, toArray } from './util';\n\nfunction cloneCanvasElement(node) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const dataURL = node.toDataURL();\n\n    if (dataURL === 'data:,') {\n      return Promise.resolve(node.cloneNode(false));\n    }\n\n    return createImage(dataURL);\n  });\n}\n\nfunction cloneVideoElement(node, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return Promise.resolve(node.poster).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(node.poster) || data.contentType)).then(dataURL => createImage(dataURL));\n  });\n}\n\nfunction cloneSingleNode(node, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (node instanceof HTMLCanvasElement) {\n      return cloneCanvasElement(node);\n    }\n\n    if (node instanceof HTMLVideoElement && node.poster) {\n      return cloneVideoElement(node, options);\n    }\n\n    return Promise.resolve(node.cloneNode(false));\n  });\n}\n\nconst isSlotElement = node => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\n\nfunction cloneChildren(nativeNode, clonedNode, options) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const children = isSlotElement(nativeNode) && nativeNode.assignedNodes ? toArray(nativeNode.assignedNodes()) : toArray(((_a = nativeNode.shadowRoot) !== null && _a !== void 0 ? _a : nativeNode).childNodes);\n\n    if (children.length === 0 || nativeNode instanceof HTMLVideoElement) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return children.reduce((deferred, child) => deferred // eslint-disable-next-line no-use-before-define\n    .then(() => cloneNode(child, options)).then(clonedChild => {\n      // eslint-disable-next-line promise/always-return\n      if (clonedChild) {\n        clonedNode.appendChild(clonedChild);\n      }\n    }), Promise.resolve()).then(() => clonedNode);\n  });\n}\n\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n  const source = window.getComputedStyle(nativeNode);\n  const target = clonedNode.style;\n\n  if (!target) {\n    return;\n  }\n\n  if (source.cssText) {\n    target.cssText = source.cssText;\n  } else {\n    toArray(source).forEach(name => {\n      target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));\n    });\n  }\n}\n\nfunction cloneInputValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLTextAreaElement) {\n    clonedNode.innerHTML = nativeNode.value;\n  }\n\n  if (nativeNode instanceof HTMLInputElement) {\n    clonedNode.setAttribute('value', nativeNode.value);\n  }\n}\n\nfunction decorate(nativeNode, clonedNode) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof Element)) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve().then(() => cloneCSSStyle(nativeNode, clonedNode)).then(() => clonePseudoElements(nativeNode, clonedNode)).then(() => cloneInputValue(nativeNode, clonedNode)).then(() => clonedNode);\n  });\n}\n\nexport function cloneNode(node, options, isRoot) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!isRoot && options.filter && !options.filter(node)) {\n      return Promise.resolve(null);\n    }\n\n    return Promise.resolve(node).then(clonedNode => cloneSingleNode(clonedNode, options)).then(clonedNode => cloneChildren(node, clonedNode, options)).then(clonedNode => decorate(node, clonedNode));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}